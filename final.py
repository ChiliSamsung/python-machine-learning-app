import requests
import re
import json
import time

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from patsy import dmatrices
from sklearn.linear_model import LogisticRegression
from sklearn.cross_validation import train_test_split
from sklearn import metrics
from sklearn.cross_validation import cross_val_score

import matplotlib.pyplot as plt


import csv
import ast

from sklearn import datasets
from sklearn.feature_selection import RFE

'''trying riot stuff'''
query_params = {}
MY_API_KEY = 'RGAPI-4ae4e8a1-504f-4b48-a7d3-af70c2201a64'

def get_league(l, d):
    if l == 'BRONZE':
        return 0.0 + get_division(d)
    elif l == 'SILVER':
        return 1.0 + get_division(d)
    elif l == 'GOLD':
        return 2.0 + get_division(d)
    elif l == 'PLATINUM':
        return 3.0 + get_division(d)
    elif l == 'DIAMOND':
        return 4.0 + get_division(d)
    elif l == 'MASTER':
        return 5.0 + get_division(d)
    else:
        return 6.0

def get_division(d):
    if d == 'V':
        return 0.0
    elif d == 'IV':
        return 0.2
    elif d == 'III':
        return 0.4
    elif d == 'II':
        return 0.6
    else:
        return 0.8


'''given a summonderId, gets all the stats of the player. Winrate + summoner level, hotstreak, division, and matchId'''
'''returns a list of stuff: [mastery, hotstreak or no, division, freshblood or not, win rate, lp, summoner lvl]'''
def get_summ_details(summ_id):
    LEAGUE_QUERY = 'https://na1.api.riotgames.com/lol/league/v3/positions/by-summoner/' + str(summ_id) + '?api_key=' + MY_API_KEY
    MASTERY_QUERY = 'https://na1.api.riotgames.com/lol/champion-mastery/v3/scores/by-summoner/' + str(summ_id) + '?api_key=' + MY_API_KEY
    SUMMONER_QUERY = 'https://na1.api.riotgames.com/lol/summoner/v3/summoners/' + str(summ_id) + '?api_key=' + MY_API_KEY
    res = []
    re = requests.get(MASTERY_QUERY, params = query_params)
    summdata = re.json()
    res.append(summdata)
    re = requests.get(LEAGUE_QUERY, params = query_params)
    summdata = re.json()
    if len(summdata) == 0:
        return []
    if summdata[0]['hotStreak']:
        res.append(1)
    else:
        res.append(0)
    res.append(get_league(summdata[0]['tier'], summdata[0]['rank']))
    if summdata[0]['freshBlood']:
        res.append(1)
    else:
        res.append(0)
    res.append((summdata[0]['wins'] * 1.0) / ((summdata[0]['wins'] * 1.0) + summdata[0]['losses'] * 1.0))
    res.append(summdata[0]['leaguePoints'])
    re = requests.get(SUMMONER_QUERY, params = query_params)
    summdata = re.json()
    res.append(summdata['summonerLevel'])
    return res

def get_accumulated_stats_from_summ_ids(lst):
    accumulated_stats = [0]*14
    for i in range(10):
        individual_stats = get_summ_details(lst[i])
        if len(individual_stats) == 0:
            return {}
        if i < 5:
            for j in range(7):
                accumulated_stats[j] += individual_stats[j]
        else:
            for j in range(7):
                accumulated_stats[j+7] += individual_stats[j]
    return accumulated_stats

def get_accumulated_stats_from_match_id(matchid):
    accumulated_stats = [0]*14
    summonerIds = get_summoner_ids_from_match_id(matchid)
    for i in range(10):
        individual_stats = get_summ_details(summonerIds[i])
        if len(individual_stats) == 0:
            return {}
        if i < 5:
            for j in range(7):
                accumulated_stats[j] += individual_stats[j]
        else:
            for j in range(7):
                accumulated_stats[j+7] += individual_stats[j]
    query_params = {'MatchDto': 'participants'}
    MATCH_QUERY = 'https://na1.api.riotgames.com/lol/match/v3/matches/' + str(matchid) + '?api_key=' + MY_API_KEY
    r = requests.get(MATCH_QUERY, params = query_params)
    data = r.json()
    if data['teams'][0]['win'] == 'Win':
        return {0 : accumulated_stats}
    else:
        return {1 : accumulated_stats}

def get_summoner_ids_from_match_id(matchid):
    summonerIds = []
    query_params = {'MatchDto': 'participants'}
    MATCH_QUERY = 'https://na1.api.riotgames.com/lol/match/v3/matches/' + str(matchid) + '?api_key=' + MY_API_KEY
    r = requests.get(MATCH_QUERY, params = query_params)
    for i in range(10):
        data = r.json()
        summonerIds.append(data['participantIdentities'][i]['player']['summonerId'])
    return summonerIds

def make_dataset(lst):
    res = []
    F = open('train', 'a')
    for i in range(150, 250):
        lst1 = get_accumulated_stats_from_match_id(lst[i])
        if len(lst1) != 0:
            res.append(lst1)
            F.write(str(lst1) + '\n')
        time.sleep(30)
    F.close()
    return res         

lst = [2748486443, 2748473941, 2744617139, 2744625158, 2744620686, 2744603762, 2744568942, 2744571727, 2744535717, 2739226345, 2739222720, 2739187280, 2714655111, 2714639215, 2713637850, 2713647145, 2623950164, 2614124802, 2612835541, 2612242499, 2612222695, 2611097143, 2611103854, 2611084050, 2608896848, 2608904678, 2606152315, 2603708755, 2602732003, 2602369139, 2602367272, 2463026152, 2442357600, 2439326478, 2439321735, 2439286633, 2437237570, 2415916570, 2415654544, 2415347125, 2415335684, 2414558162, 2413831298, 2413134047, 2413132083, 2413075415, 2413039069, 2411504109, 2409480894, 2409176548, 2409161445, 2409106400, 2409114933, 2407455435, 2402334320, 2402293794, 2401839565, 2401823306, 2401774026, 2401728714, 2401722134, 2400057729, 2400052960, 2399996609, 2399917337, 2399678723, 2399672357, 2398909441, 2398849789, 2398782335, 2398736279, 2768803305, 2768776077, 2768696386, 2768680774, 2768555785, 2768543814, 2768551851, 2768509081, 2768525973, 2768495554, 2768448995, 2768462226, 2768159769, 2768152738, 2768126493, 2767908190, 2767906831, 2767895880, 2767248237, 2767232705, 2767209371, 2767201783, 2767186794, 2767163861, 2767101164, 2767100340, 2767079317, 2767087499, 2767076961, 2767026766, 2766989509, 2766983215, 2766976313, 2766947759, 2766895568, 2766827732, 2766816008, 2766801246, 2766770473, 2766755226, 2766750042, 2766715469, 2766707389, 2766683927, 2766690049, 2766265152, 2766270765, 2766235077, 2766230604, 2766215979, 2766211318, 2766178291, 2766175902, 2764631542, 2764556847, 2764555738, 2764573769, 2764572554, 2764552476, 2764560996, 2764549219, 2764151823, 2764111982, 2764092220, 2764000365, 2763628151, 2763626284, 2763614858, 2762377576, 2762381909, 2762296173, 2760983032, 2760980504, 2760949095, 2760882045, 2760857548, 2760852198, 2760814548, 2760796329, 2760757736, 2760103318, 2760090943, 2760066723, 2760062840, 2760036921, 2760018789, 2759987194, 2759939686, 2759467956, 2759450656, 2759434572, 2759406066, 2759368052, 2759339368, 2759339769, 2757827893, 2757841664, 2741624857, 2741534713, 2741366161, 2769139400, 2769112692, 2766365210, 2766336308, 2763155100, 2762744032, 2761915897, 2761887843, 2761305177, 2761164481, 2761145736, 2761139738, 2759413472, 2759386917, 2759364701, 2758188217, 2758183476, 2758173843, 2757104468, 2756160422, 2756144080, 2755416296, 2754665938, 2754646501, 2754474163, 2754436517, 2753401068, 2751505956, 2751213448, 2751195342, 2750529501, 2750403875, 2750378404, 2750288129, 2746299839, 2744068202, 2744061724, 2741782154, 2741640549, 2741522618, 2741145248, 2741160442, 2741086309, 2741067636, 2740408004, 2740391684, 2740379134, 2740339471, 2768095531, 2767966651, 2767962342, 2767939624, 2767787142, 2767382561, 2767315360, 2766900026, 2765504227, 2758387492, 2757158705, 2769641349, 2768099426, 2767670008, 2767593099, 2767386714, 2767299225, 2767292468, 2767273813, 2767227703, 2765236085, 2765231612, 2764729200, 2743160975, 2733457580, 2731117857, 2730996330, 2673076979, 2673042008, 2673006288, 2672998182, 2655429968, 2655406530, 2655040114, 2655012304, 2652171870, 2652128235, 2652098661, 2652045941, 2652034561, 2650670463, 2650414531, 2649850630, 2647980173, 2647747136, 2647721521, 2647702889, 2647251978, 2647215528, 2647186365, 2647168893, 2647136730, 2646401881, 2646339515, 2646346201, 2646305219, 2646284826, 2646243779, 2645884613, 2645863364, 2645814696, 2645768709, 2645724847, 2645694557, 2645676821, 2644789323, 2644781840, 2644692435, 2644137917, 2644046530, 2643944815, 2643729852, 2564064704, 2560822509, 2551924142, 2550989827, 2549840045, 2549802976, 2549801721, 2548493270, 2547900177, 2547856432, 2547793534, 2543500410, 2511751556, 2511624388, 2511216088, 2511180793, 2748894039, 2745277894, 2745270135, 2745227693, 2744979549, 2745021634, 2744946320, 2743861192, 2743832952, 2743804600, 2741647392, 2741527679, 2741348045, 2741320901, 2740920629, 2740461407, 2740421543, 2740369588, 2740362075, 2740351870, 2626765383, 2626755288, 2542164279, 2542108381, 2542095117, 2542091695, 2414610300, 2414568762, 2414549598, 2414548996, 2414566212, 2402528620, 2402519323, 2401905491, 2401902965, 2401836539, 2401840732, 2401783728, 2401060191, 2400999323, 2393929077, 2393807575, 2393799764, 2393616467, 2393575627, 2393573047, 2393509431, 2393507977, 2393544466, 2393505984, 2393541467, 2393489319, 2392581705, 2392533419, 2392509698, 2392509037, 2392507954, 2743720597, 2743682878, 2743574354, 2743580949, 2743442638, 2743345371, 2741812073, 2740884972, 2740855014, 2740802093, 2740766436, 2740379905, 2740299071, 2740303056, 2739786343, 2739794146, 2616764702, 2616250185, 2616234921, 2616230912, 2614386941, 2614339890, 2614220721, 2614140597, 2614095533, 2611877023, 2611874071, 2611827719, 2611811430, 2611108487, 2606727619, 2606724379, 2602254663, 2602179000, 2602048427, 2602024958, 2602022507, 2601917284, 2601912359, 2601191303, 2601157714, 2597879565, 2597165958, 2597099707, 2597083441, 2597004456, 2596450828, 2596416902, 2596403248, 2596367353, 2596078624, 2595992883, 2595892513, 2595909918, 2595868137, 2595455871, 2595453755, 2595418717, 2592696401, 2592666730, 2592597345, 2591780830, 2591192715, 2591179798, 2591066329, 2590512565, 2590498726, 2590289493, 2590283360, 2590262424, 2589806660, 2589795839, 2589108795, 2589093675, 2585783134, 2585212600, 2585159217, 2585155333, 2584892486, 2584680098, 2584657841, 2584656313, 2584654252, 2584329822, 2584302886, 2583049060, 2583041442, 2582175714, 2580630698, 2580556797, 2580462244, 2580368258, 2579960610, 2579857429, 2579873261, 2579597753, 2579604406, 2576630853, 2576549522, 2576548145, 2766339625, 2765492945, 2765464725, 2763325272, 2756257099, 2756208645, 2756045237, 2751161129, 2745016052, 2744971394, 2744417750, 2744351222, 2743900113, 2740728349, 2740736773, 2734991745, 2734953766, 2728745888, 2717975345, 2635946897, 2622780969, 2622002637, 2591741915, 2591698357, 2591674071, 2590355153, 2587980143, 2587393254, 2587411745, 2587401787, 2587390108, 2586640572, 2586588694, 2586577764, 2586557204, 2569189583, 2553325272, 2553302386, 2549023633, 2548976683, 2546985443, 2546926392, 2546902333, 2542989268, 2542172105, 2540736897, 2540624532, 2540336998, 2538984557, 2538983672, 2538934582, 2538982317, 2536577602, 2534197655, 2532521606, 2528345279, 2528335390, 2513654724, 2512494337, 2512490776, 2512453602, 2510509770, 2510247721, 2510243488, 2510230000, 2510046874, 2508425511, 2769961652, 2769960109, 2769491466, 2769463305, 2768623987, 2768620399, 2768597812, 2768591189, 2768599800, 2768018514, 2768017008, 2768031343, 2767987298, 2767983616, 2766092226, 2765109579, 2765096808, 2764632514, 2764610413, 2764605885, 2764566199, 2764563633, 2763680803, 2763647368, 2763644294, 2763650883, 2763629454, 2763631338, 2763599198, 2763004487, 2762979604, 2762975129, 2762950375, 2762924961, 2762036479, 2761505543, 2761523798, 2760979613, 2760966540, 2756484698, 2756462561, 2756439178, 2755007488, 2754993231, 2753384395, 2642299737, 2642287095, 2427789464, 2427798927, 2427043918, 2426982053, 2426990181, 2424989047, 2424996791, 2768953848, 2768926648, 2767396309, 2767379861, 2764114912, 2764075269, 2764018290, 2764010098, 2760698964, 2760692627, 2760675984, 2760643908, 2757720612, 2757691587, 2747316699, 2744814280, 2744758275, 2744744518, 2744709606, 2743859036, 2742823546, 2742796438, 2742244083, 2742219583, 2742211350, 2741781109, 2741631170, 2739624979, 2737097332, 2736652290, 2736599473, 2736579887, 2730396521, 2730356329, 2730348739, 2629832805, 2629822911, 2629782267, 2628465035, 2620690309, 2578149427, 2577789582, 2557348416, 2553536677, 2553552557, 2552356376, 2552292960, 2552228107, 2551922895, 2551887465, 2551890660, 2551837881, 2544069700, 2543803116, 2543753899, 2542238357, 2532370103, 2532027968, 2531086238, 2531083170, 2531072130, 2529410830, 2529368058, 2524573600, 2524511843, 2524466396, 2393879379, 2393818312, 2393804782, 2393219163, 2392430669, 2392379438, 2769702956, 2769674075, 2767581467, 2767394718, 2767318203, 2767312788, 2767264153, 2766753556, 2761153258, 2761125474, 2761088076, 2761090993, 2759210933, 2759182787, 2757554859, 2757525586, 2757517090, 2757466926, 2746312935, 2746041705, 2736628719, 2736606248, 2736577765, 2731493143, 2592654908, 2592616792, 2592594144, 2591580545, 2591518501, 2591502884, 2588898934, 2588878267, 2588677230, 2588578481, 2588583832, 2587986164, 2587995170, 2587975096, 2587983904, 2587659746, 2587636482, 2587631541, 2587577956, 2540865658, 2540847255, 2445010422, 2443160000, 2434442237, 2434398907, 2424598009, 2423958685, 2423952427, 2420875732, 2413099139, 2413096392, 2404890322, 2404814785, 2404779496, 2393442043, 2367080985, 2366882871, 2365599046, 2752937831, 2752907315, 2747701629, 2747092639, 2746213259, 2746195362, 2746144809, 2745368126, 2743770705, 2743752772, 2743489412, 2743482152, 2743441546, 2743345287, 2742179240, 2742192347, 2742149603, 2741868276, 2741811667, 2741632128, 2741079466, 2741051068, 2740477478, 2738366590, 2737914277, 2737570582, 2728646477, 2728630109, 2665406194, 2656708095, 2656688400, 2656170692, 2656119664, 2656069357, 2651987888, 2649026670, 2648992599, 2648654857, 2647235220, 2646249263, 2645669947, 2644801875, 2643339400, 2643343678, 2643305585, 2643276429, 2643099386, 2643087507, 2642996982, 2641886092, 2641198134, 2639947165, 2639918591, 2617628243, 2617288095, 2615503803, 2615458091, 2615456475, 2615438647, 2615253629, 2615204018, 2615184105, 2615166473, 2615138368, 2614913368, 2614256524, 2614147890, 2614115271, 2613913087, 2613869205, 2613642559, 2613596852, 2613578549, 2613561788, 2613534642, 2613410145, 2612945004, 2612838062, 2612811577, 2612673625, 2612617076, 2612368152, 2612152330, 2612135941, 2612109214, 2611788968, 2611759167, 2611742659, 2611598005, 2611591864, 2611437601, 2611063156, 2611027770, 2611022889, 2610994518, 2610735832, 2610432918, 2610405717, 2610367880, 2610341401, 2766970998, 2766909321, 2766901472, 2766431172, 2766358968, 2766352084, 2766334862, 2765510977, 2765451640, 2765412011, 2765053689, 2764812837, 2764776417, 2764758631, 2764534107, 2764509566, 2764497084, 2764510947, 2764476910, 2764460878, 2769562569, 2769527713, 2764759743, 2764734136, 2764683780, 2764667794, 2762977187, 2762953688, 2741343223, 2740415986, 2740385578, 2739828881, 2739309971, 2739286307, 2696962134, 2695826852, 2622931672, 2622889079, 2618748101, 2618410416, 2618390055, 2618181735, 2618069747, 2617787416, 2616330485, 2612580145, 2612534379, 2612224572, 2612146806, 2612141209, 2612095856, 2609513722, 2609125623, 2609130921, 2608519801, 2608396313, 2608368625, 2605010904, 2603559501, 2603562163, 2603282648, 2599547117, 2599562388, 2598161607, 2597910400, 2597525205, 2597009347, 2597002095, 2596785957, 2596551912, 2596514930, 2596258257, 2596237535, 2595972666, 2595970882, 2595941333, 2595362699, 2595336272, 2595300406, 2594162245, 2594094228, 2594039327, 2593903168, 2593868319, 2593872383, 2526036464, 2525000531, 2523819065, 2523813379, 2519386048, 2508474105, 2508490303, 2508427794, 2508423173, 2508431185, 2508410410, 2508369656, 2508125751, 2508131475, 2508095958, 2507984070, 2507990178, 2507927096, 2507911914, 2507869538, 2507884810, 2507109360, 2503124718, 2500957873, 2500896799, 2500335002, 2500227212, 2500202539, 2500183837, 2500180392, 2500135374, 2500130894, 2500006731, 2498430041, 2498391516, 2762946224, 2762900648, 2762876518, 2748154918, 2748129879, 2741923954, 2741627341, 2741524181, 2737561200, 2737522494, 2737500631, 2737464925, 2732858551, 2732839916, 2732812218, 2732792858, 2603962758, 2600124452, 2600120035, 2594229677, 2594220842, 2594163823, 2594129499, 2593852074, 2593832607, 2593791320, 2593750785, 2593699784, 2590128608, 2584134536, 2584131929, 2583265299, 2583251442, 2470687339, 2470649308, 2470634381, 2464904456, 2464889653, 2464865920, 2464396930, 2459429336, 2441707470, 2441703323, 2441509655, 2410356380, 2410341259, 2410296261, 2404993676, 2400767190, 2400759823, 2400714360, 2400636844, 2400420756, 2400366584, 2400342155, 2400297704, 2389814949, 2388898271, 2387093406, 2385200718, 2384240862, 2383769020, 2383763003, 2377659299, 2376512772, 2376457423, 2766285492, 2764667766, 2764660711, 2764556363, 2764097774, 2763701078, 2763618751, 2763636414, 2763626045, 2762920665, 2762384353, 2761718983, 2761525753, 2761134369, 2761022272, 2761016334, 2760625786, 2759698476, 2757333186, 2757282554, 2757290581, 2756595020, 2756061080, 2756033414, 2755057388, 2754408828, 2753449336, 2753229154, 2752540040, 2752483800, 2752448601, 2752427152, 2752418941, 2752398531, 2752161451, 2752118693, 2751490025, 2750880212, 2749590190, 2749047254, 2748896368, 2748230570, 2748157737, 2748141548, 2748098189, 2748036536, 2747995544, 2747979531, 2746514446, 2746060959, 2746008793, 2745192409, 2745146335, 2744316354, 2744287662, 2744279109, 2743862607, 2743760589, 2742779634, 2742740323, 2742726224, 2742733521, 2742712801, 2742118551, 2742095520, 2742064971, 2741785557, 2741333440, 2741304887, 2741266226, 2740430489, 2739982728, 2739907724, 2739891550, 2739556420, 2737907437, 2736336056, 2735813830, 2735633768, 2735050912, 2733825231, 2733381047, 2733360388, 2733248703, 2733232118, 2733204116, 2732587077, 2732379921, 2732268387, 2732254103, 2599835242, 2549239967, 2514643968, 2511615524, 2504543195, 2504550159, 2504498330, 2504496882, 2504484706, 2498585551, 2769931526, 2754562556, 2753694484, 2751148933, 2751099066, 2751102213, 2751056053, 2751017663, 2750996759, 2750947739, 2750686582, 2750672705, 2750667206, 2750653700, 2750637996, 2750610183, 2750559619, 2750562498, 2750532323, 2749859986, 2749825871, 2749353299, 2749214558, 2749158506, 2746866955, 2745377537, 2745356279, 2745212126, 2743668710, 2704373865, 2704352802, 2703496761, 2703082349, 2703056392, 2702559089, 2701953964, 2701865233, 2701851982, 2701784745, 2701054451, 2700471611, 2700446159, 2700407647, 2700365938, 2699785580, 2695617756, 2695610230, 2695583187, 2695575730, 2695562180, 2695368713, 2695342944, 2695269072, 2695265347, 2694913091, 2694882865, 2694129668, 2694103320, 2692984230, 2692975425, 2692913988, 2692168044, 2692080698, 2691960036, 2691936674, 2691892698, 2691875276, 2691833187, 2691386030, 2691378223, 2691253749, 2691102528, 2691056322, 2691062889, 2691069877, 2690938187, 2690856421, 2690179130, 2690180522, 2690172133, 2690159785, 2674208973, 2673733217, 2673730542, 2673724904, 2673692514, 2671460819, 2668967584, 2668946293, 2667911730, 2667516892, 2667522966, 2667439549, 2666437013, 2666416391, 2665642368, 2665607494, 2664351734, 2664284469, 2663139852, 2769654076, 2768802983, 2768337376, 2768305430, 2768233933, 2768212223, 2766909216, 2766824863, 2766803411, 2765383860, 2765361227, 2764318295, 2764294752, 2764263723, 2764136120, 2763263120, 2763231382, 2763225872, 2763188266, 2762713343, 2762661488, 2762544060, 2762512595, 2761765611, 2761740563, 2761733775, 2761185719, 2761158420, 2759848618, 2759849752, 2759832555, 2759829759, 2759216345, 2759195228, 2758316952, 2758285096, 2758259651, 2758251676, 2757951887, 2757608021, 2757500677, 2754494687, 2752023987, 2751943275, 2751729489, 2751106104, 2750979467, 2749694128, 2749631860, 2749212851, 2749146961, 2749096049, 2749047615, 2749022725, 2748287222, 2748253729, 2748199533, 2748177289, 2748143242, 2747995991, 2747963065, 2747683408, 2747665878, 2747646051, 2747616587, 2747577936, 2747554471, 2747509881, 2747382115, 2746547177, 2746545297, 2746517857, 2746167046, 2746114018, 2746074681, 2746036579, 2745340229, 2745321148, 2745280816, 2745252593, 2744450719, 2744389006, 2744365843, 2743944534, 2743917178, 2743874492, 2743146664, 2743090707, 2743018938, 2742369964, 2742319556, 2742256617, 2742231374, 2742205951, 2742174679, 2741912514, 2741624703, 2741458321, 2741421858, 2740900469, 2768492177, 2768210830, 2768161335, 2768153137, 2768124856, 2768099287, 2766910847, 2766872830, 2766200198, 2766196803, 2764788359, 2764606202, 2764596022, 2763723794, 2763577283, 2763581933, 2763337656, 2763297119, 2762726591, 2762696085, 2762657354, 2762646985, 2762596180, 2762584246, 2762570286, 2744273142, 2744236929, 2744157464, 2744077627, 2768504037, 2768500448, 2766572954, 2766549533, 2766477336, 2766470559, 2765304448, 2765259426, 2765271355, 2764414147, 2764393436, 2764355854, 2764335577, 2764294450, 2764269105, 2764236789, 2764199129, 2764168956, 2763620743, 2761638299, 2761641055, 2761519954, 2761478811, 2761255146, 2759679135, 2759310655, 2759257212, 2759161311, 2759145672, 2759099237, 2759094672, 2759069118, 2759070276, 2759053720, 2759017405, 2758999109, 2758318779, 2758237638, 2758187114, 2755470664, 2704780607, 2703125319, 2699426260, 2699388261, 2699399811, 2699338927, 2699314011, 2699258643, 2699229156, 2645624787, 2645600991, 2644313461, 2640928988, 2640884919, 2640865345, 2640727124, 2640605787, 2640104439, 2640066747, 2638114967, 2619975090, 2619944644, 2619617084, 2617622057, 2617509458, 2617454829, 2617417059, 2617399895, 2615173764, 2608377003, 2608370443, 2608137149, 2608125268, 2608141441, 2608098378, 2607097059, 2607091687, 2606980557, 2606946942, 2603299482, 2603296935, 2603092549, 2603079902, 2602977352, 2602975049, 2602199500, 2602193193, 2602128538, 2602123172, 2582179131, 2563951088, 2563907934, 2563901006, 2563807651, 2563814117, 2563554647, 2563517887, 2563513029, 2556218235, 2556204277]

def predict_game(bluesumm1, bluesumm2, bluesumm3, bluesumm4, bluesumm5, redsumm1, redsumm2, redsumm3, redsumm4, redsumm5):
    lst = []
    QUERY1 = 'https://na1.api.riotgames.com/lol/summoner/v3/summoners/by-name/' + bluesumm1 +'?api_key=' + MY_API_KEY
    r = requests.get(QUERY1, params = query_params)
    data = r.json()
    lst.append(data['id'])
    QUERY2 = 'https://na1.api.riotgames.com/lol/summoner/v3/summoners/by-name/' + bluesumm2 +'?api_key=' + MY_API_KEY
    r = requests.get(QUERY2, params = query_params)
    data = r.json()
    lst.append(data['id'])
    QUERY3 = 'https://na1.api.riotgames.com/lol/summoner/v3/summoners/by-name/' + bluesumm3 +'?api_key=' + MY_API_KEY
    r = requests.get(QUERY3, params = query_params)
    data = r.json()
    lst.append(data['id'])
    QUERY4 = 'https://na1.api.riotgames.com/lol/summoner/v3/summoners/by-name/' + bluesumm4 +'?api_key=' + MY_API_KEY
    r = requests.get(QUERY4, params = query_params)
    data = r.json()
    lst.append(data['id'])
    QUERY5 = 'https://na1.api.riotgames.com/lol/summoner/v3/summoners/by-name/' + bluesumm5 +'?api_key=' + MY_API_KEY
    r = requests.get(QUERY5, params = query_params)
    data = r.json()
    lst.append(data['id'])
    QUERY6 = 'https://na1.api.riotgames.com/lol/summoner/v3/summoners/by-name/' + redsumm1 +'?api_key=' + MY_API_KEY
    r = requests.get(QUERY6, params = query_params)
    data = r.json()
    lst.append(data['id'])
    QUERY7 = 'https://na1.api.riotgames.com/lol/summoner/v3/summoners/by-name/' + redsumm2 +'?api_key=' + MY_API_KEY
    r = requests.get(QUERY7, params = query_params)
    data = r.json()
    lst.append(data['id'])
    QUERY8 = 'https://na1.api.riotgames.com/lol/summoner/v3/summoners/by-name/' + redsumm3 +'?api_key=' + MY_API_KEY
    r = requests.get(QUERY8, params = query_params)
    data = r.json()
    lst.append(data['id'])
    QUERY9 = 'https://na1.api.riotgames.com/lol/summoner/v3/summoners/by-name/' + redsumm4 +'?api_key=' + MY_API_KEY
    r = requests.get(QUERY9, params = query_params)
    data = r.json()
    lst.append(data['id'])
    QUERY10 = 'https://na1.api.riotgames.com/lol/summoner/v3/summoners/by-name/' + redsumm5 +'?api_key=' + MY_API_KEY
    r = requests.get(QUERY10, params = query_params)
    data = r.json()
    lst.append(data['id'])
    time.sleep(30)
    stats = get_accumulated_stats_from_summ_ids(lst)
    F = open('prediction', 'w')
    F.write(str({0 : stats}) + '\n')
    F.write(str({0 : stats}))
    F.close()
    setup_csv_file()
    setup_csv_file2()
    pred = pd.read_csv('prediction.csv', header = 0)
    data = pd.read_csv('total_data.csv', header = 0)
    training_features = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14']
    target = 'Win'
    train_x, test_x, train_y, test_y = train_test_split(data[training_features], data[target], train_size = 0.8)
    logreg = LogisticRegression()
    rfe = RFE(logreg, 4)
    rfe = rfe.fit(data[training_features], data[target])
    # print(rfe.support_)
    # print(rfe.ranking_)
    best_features = ['3', '5', '10', '12']
    train_x, test_x, train_y, test_y = train_test_split(data[best_features], data[target], train_size = 0.8)
    pred_x, pred2_x, nothing1, nothing2 = train_test_split(pred[best_features], pred[target], train_size = 0.5)
    logistic_regression_model = LogisticRegression()
    trained_logistic_regression_model = logistic_regression_model.fit(train_x, train_y)
    # accuracy_score_on_training_data = trained_logistic_regression_model.score(train_x, train_y)
    # print(accuracy_score_on_training_data)
    # accuracy_score_on_testing_data = trained_logistic_regression_model.score(test_x, test_y)
    # print(accuracy_score_on_testing_data)
    if trained_logistic_regression_model.predict(pred_x) == [1]:
        print("Red team wins!")
    else:
        print("Blue team wins!")


def setup_csv_file():
    file = open("train", "r")
    list_of_entries = []
    for i in range(0, 317):
        dictionary = ast.literal_eval(file.readline())
        list_of_entries.append(dictionary)
    with open('total_data.csv', 'w') as csvfile:
        filewriter = csv.writer(csvfile, delimiter=',', quotechar='|', quoting=csv.QUOTE_MINIMAL)
        filewriter.writerow(['Win', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14'])
        for i in range(0, 317):  
            this_dict = list_of_entries[i]
            win = list(this_dict.keys())[0]
            info = this_dict.get(win)
            data1 = str(info[0])
            data2 = str(info[1])
            data3 = str(info[2])
            data4 = str(info[3])
            data5 = str(info[4])
            data6 = str(info[5])
            data7 = str(info[6])
            data8 = str(info[7])
            data9 = str(info[8])
            data10 = str(info[9])
            data11 = str(info[10])
            data12 = str(info[11])
            data13 = str(info[12])
            data14 = str(info[13])
            filewriter.writerow([win, data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11, data12, data13, data14])

def setup_csv_file2():
    file = open("prediction", "r")
    list_of_entries = []
    for i in range(0, 2):
        dictionary = ast.literal_eval(file.readline())
        list_of_entries.append(dictionary)
    with open('prediction.csv', 'w') as csvfile:
        filewriter = csv.writer(csvfile, delimiter=',', quotechar='|', quoting=csv.QUOTE_MINIMAL)
        filewriter.writerow(['Win', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14'])
        for i in range(0, 2):  
            this_dict = list_of_entries[i]
            win = list(this_dict.keys())[0]
            info = this_dict.get(win)
            data1 = str(info[0])
            data2 = str(info[1])
            data3 = str(info[2])
            data4 = str(info[3])
            data5 = str(info[4])
            data6 = str(info[5])
            data7 = str(info[6])
            data8 = str(info[7])
            data9 = str(info[8])
            data10 = str(info[9])
            data11 = str(info[10])
            data12 = str(info[11])
            data13 = str(info[12])
            data14 = str(info[13])
            filewriter.writerow([win, data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11, data12, data13, data14])


def main():
    predict_game('TiltedMcMuffin', 'SimplyUnlucky16', 'AgorTheDamned', 'TGLGatsby', 'MirakL', 'mamanoobisop', 'Talrayn', 'CeltishSquee', 'SomethingFat', 'bsweets61')
    
if __name__ == '__main__':
    main()
